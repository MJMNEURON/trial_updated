load_file("nrngui.hoc")


//----------------------------------------------------------------------------
// retinal axon
//----------------------------------------------------------------------------
create retinal_axon
retinal_axon {
	insert pas
	g_pas = 3.79e-5
	e_pas = -76.5		// to fit current-clamp data (was -71 to -73)
	cm = 0.88
	Ra = 173

	insert hh2		// insert fast spikes
	ena = 50
	ek = -100
	vtraub_hh2 = -52
	gnabar_hh2 = 0.01		// adapted to single-compartment
	gkbar_hh2 = 0.01 		// adapted to single-compartment

	insert itGHK		// T-current everywhere
	cai = 2.4e-4 
	cao = 2 
	eca = 120 
	shift_itGHK = -1	// screening charge shift + 3 mV error
	gcabar_itGHK = 0.0002
	pcabar_itGHK = 8e-5
	qm_itGHK = 2.5
	qh_itGHK = 2.5
	
	insert cad		// calcium diffusion everywhere
	depth_cad = 0.1
	kt_cad = 0		// no pump
	kd_cad = 1e-4
	taur_cad = 5
	cainf_cad = 2.4e-4	
}



objectvar stim // insert current injection

retinal_axon stim = new IClamp(.5)
stim.del = 0
stim.dur = 1e9 // dur has to be infinite when used with vetor playing 
stim.amp = 0

objref fspikes, vecspikes, vecstim
fspikes=new File()
fspikes.ropen("/home/major/trial/combined/input_cs/cs40_09.dat")
vecspikes=new Vector()
vecstim = new Vector(1000,0)
vecspikes.scanf(fspikes)
for total=0, vecspikes.size()-1{
    vecstim.x( int(vecspikes.x(total)*1000) ) = 1000
}
vecspikes.printf()
vecstim.play(&stim.amp, 1)
//vecstim.printf()



//----------------------------------------------------------------------------
// relay cell
//----------------------------------------------------------------------------

load_file("relay.nrn")
objectvar relay
relay = new RelayCell()

//----------------------------------------------------------------------------
// retina -> relay AMPA 
//----------------------------------------------------------------------------

objectvar syn

relay.dend4[0] syn = new AMPA()
relay.dend4[0] syn.loc(0.5) // assign postsynaptic compartment
setpointer syn.pre, retinal_axon.v(0.5) // assign presynaptic compartment

Cmax_AMPA = 1 // (mM) max transmitter concentration
Cdur_AMPA = 1 // (ms) transmitter duration (rising phase)
Alpha_AMPA = 1.1 // (/ms mM) forward (binding) rate
Beta_AMPA = 0.19 // (/ms) backward (unbinding) rate
Erev_AMPA = 0 // (mV) reversal potential
Prethresh_AMPA = 0 // (mV) voltage level nec for release
Deadtime_AMPA = 1 // (ms) mimimum time between release events
syn.g = 0.0001 // (umho) maximum conductanc


objref netcon
netcon = new NetCon(&retinal_axon.v(0.5), syn)
netcon.weight = 0.08

objref fih
fih = new FInitializeHandler("loadqueue()")
proc loadqueue() {
for ii=0, vecstim.size()-1 {netcon.event(vecstim.x[ii])
}
}

//----------------------------------------------------------------------------
// interneuron
//----------------------------------------------------------------------------
/*cvode_active(0)

load_file("interneuron/interneuron.nrn")
objectvar inter
inter = new InterNeuron()
*/

//----------------------------------------------------------------------------
// transient time
//----------------------------------------------------------------------------
trans = 00

print " "
print ">> Transient time of ",trans," ms"
print " "

//----------------------------------------------------------------------------
// setup simulation parameters
//----------------------------------------------------------------------------
Dt = 0.2
npoints = 4000

dt = 0.1			// must be submultiple of Dt
tstart = trans
tstop = trans + npoints * Dt
runStopAt = tstop
steps_per_ms = 1/Dt

celsius = 34			// temperature of John's experiments

v_init = -74			// approximate resting Vm

objref recv, rect, savspike
rect = new Vector()
recv = new Vector()
rect.record(&t)
//recv.record(&retinal_axon.v(0.5))
recv.record(&relay.dend4[0].v(0.5))
run()
//rect.printf()
savspike= new File()
savspike.wopen("/home/major/trial/combined/result_cs/csr1/csr1_01.dat")
//rect.printf()
timestep=0
for i=0, rect.size()-1 {
    if (recv.x[i] >= -15 && timestep + 1 < rect.x(i)){
	timestep=rect.x(i)
	printf("%g\n", timestep)
	savspike.printf("%g\n", timestep)
	//savspike.printf("%g \t %g\n", rect.x(i), recv.x(i))
}
}

savspike.close()


