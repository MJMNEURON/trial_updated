load_file("nrngui.hoc")

load_file("INmodel.hoc")

create retinal_axon
//tc200_cc.oc
retinal_axon {
  insert pas
  g_pas = 3.79e-5
  e_pas = -76.5   // to fit current-clamp data (was -71 to -73)
  cm = 0.88
  Ra = 173

  insert hh2    // insert fast spikes
  ena = 50
  ek = -100
  vtraub_hh2 = -52
  gnabar_hh2 = 0.01   // adapted to single-compartment
  gkbar_hh2 = 0.01    // adapted to single-compartment

  insert itGHK    // T-current everywhere
  cai = 2.4e-4 
  cao = 2 
  eca = 120 
  shift_itGHK = -1  // screening charge shift + 3 mV error
  gcabar_itGHK = 0.0002
  pcabar_itGHK = 8e-5
  qm_itGHK = 2.5
  qh_itGHK = 2.5
  
  insert cad    // calcium diffusion everywhere
  depth_cad = 0.1
  kt_cad = 0    // no pump
  kd_cad = 1e-4
  taur_cad = 5
  cainf_cad = 2.4e-4  

  forall {insert pas e_pas=Vrest g_pas=1/Rm Ra=rall cm=cap}
forall {
  insert iar ghbar_iar=ghbar*ihdendfac
  insert Cad
  insert ical
  insert it2
  insert iahp
  insert hh2 ena=50 ek=-90
  insert ican

}

}

/*
create retinal_axon

retinal_axon {
  
  diam=10
  L=10
  insert pas
  g_pas=1/5000
  e_pas=v_init

  insert hh2 // insert Hodgk-Hux. Na+ and K+ currents for spikes
  ek = -90
  gnabar_hh2 = 0.1
  gkbar_hh2 = 0.03
  
/*
nadendfac = 0.1
ihdendfac = 1
ldendfac = 0.25
iahpdendfac = 0.1
itinc = 2.39/60
icaninc = itinc
*/
/*
rall = 113 //most people find something like this
cap = 1.1
Rm = 22000
Vrest = -63
Epas = -67

// Channel densities & shifts (for additional channels see May_dends.hoc)

gna =  0.09
nash = - 52.6
gkdr = 0.37
kdrsh = -51.2
gahp = 6.4e-5
gcat=1.17e-5
gcal=0.0009
ghbar=0.00011
catau = 50
gcanbar = 2e-8


// Insert channels:
forall {insert pas e_pas=Vrest g_pas=1/Rm Ra=rall cm=cap}
forall {
  insert iar ghbar_iar=ghbar*ihdendfac
  insert Cad
  insert ical
  insert it2
  insert iahp
  insert hh2 ena=50 ek=-90
  insert ican

}

}
*/
xpanel("select parameterization")
  xbutton("P1:MP = -63","runP1MP()")
 // xbutton("Figure 4 B1. P1:HP = -57","runP1HP()")
  xbutton("P2:MP = -69","runP2MP()")
 // xbutton("Figure 4 B2. P1:MP = -58","runP2HP()")
xpanel()

proc runP1MP() {
  {print "Using Parameterization 1, Resting pot. -63mV"}
  {xopen("Parameters1.hoc")}
  {access soma}
  {Vrest = -63}

}

proc runP2MP() {
  {print "Using Parameterization 2, Resting pot. -69mV"}
  {xopen("Parameters2.hoc")}
  {access soma}
  {Vrest = -69}

}


objectvar stim // insert current injection

retinal_axon stim = new IClamp(.5)
stim.del = 0
stim.dur = 1e9 // dur has to be infinite when used with vetor playing 
stim.amp = 0

objref fspikes, vecspikes, vecstim
fspikes=new File()
fspikes.ropen("../combined/contrast/cs40_01.dat")
vecspikes=new Vector()
vecstim = new Vector(1000,0)
vecspikes.scanf(fspikes)
for total=0, vecspikes.size()-1{
    vecstim.x( int(vecspikes.x(total)*1000) ) = 1000
}
vecspikes.printf()
vecstim.play(&stim.amp, 1)
/*
objectvar syni
soma syni = new AMPA()
soma syni.loc(0.5) // assign postsynaptic compartment
setpointer syni.pre, retinal_axon.v(0.5) // assign presynaptic compartment
*/

objectvar syn2retinal_axon
syn2retinal_axon = new List()

objectvar syn // won't be any different if using objref
dend[87] syn = new AMPA(0.5)

//Cmax_AMPA = 1 // (mM) max transmitter concentration
//Cdur_AMPA = 1 // (ms) transmitter duration (rising phase)
//Alpha_AMPA = 1.1 // (/ms mM) forward (binding) rate
//Beta_AMPA = 0.19 // (/ms) backward (unbinding) rate
//Erev_AMPA = 0 // (mV) reversal potential
Prethresh_AMPA = 0 // (mV) voltage level nec for release
//Deadtime_AMPA = 1 // (ms) mimimum time between release events
//syni.g = 0.0001 // (umho) maximum conductanc
retinal_axon syn2retinal_axon.append( new NetCon(&v(0.5), syn, Prethresh_AMPA, 0, 0.19496) )

/////////////////////////////////////////////////
//using two-step synapse
/////////////////////////////////////////////////
/*objref syn
dend4[0] syn= new ExpSyn(0.5)
syn.tau=0.1
syn.i=1
syn.e=0
*/
/*
objref syn
soma syn= new Exp2Syn(0.5)
syn.tau1=3
syn.tau2=3
//syn.i=1 //in picometers pA, in the figure, they applied 20, 100, 250 and 500, fig 4 Goycolar
syn.e=0 //ampa receptor rev. potential


objref netcon, nil
netcon = new NetCon(nil, syn)

// netcon.weight = 0.08
netcon.weight = 0.1 //for replicating Goycolar 2008

/*
objref fih
fih = new FInitializeHandler("loadqueue()")
proc loadqueue() { 
	for ii=0, vecspikes.size()-1 {netcon.event(vecspikes.x[ii])
}
}



objref fih
fih = new FInitializeHandler("loadqueue()")
proc loadqueue() { 
	netcon.event(100)

}
*/
//----------------------------------------------------------------------------
//  transient time
//----------------------------------------------------------------------------
trans = 00

print " "
print ">> Transient time of ",trans," ms"
print " "



//----------------------------------------------------------------------------
//  setup simulation parameters
//----------------------------------------------------------------------------
Dt = 0.2
npoints = 4000

dt = 0.1			// must be submultiple of Dt
tstart = trans
tstop = trans + npoints * Dt
runStopAt = tstop
steps_per_ms = 1/Dt

celsius = 34			// temperature of John's experiments

v_init = -74			// approximate resting Vm

objref recv, rect, savspike
rect = new Vector()
recv = new Vector()
rect.record(&t)
//recv.record(&retinal_axon.v(0.5))
recv.record(&soma.v(0.5))
run()
savspike= new File()
savspike.wopen("result_cs/csr1/csr1_01ampa.dat")
//recv.printf()
timestep=0
for i=0, rect.size()-1 {
     if (recv.x[i] >= -15 && timestep + 1 < rect.x(i)){
	   timestep=rect.x(i)
	   savspike.printf("%g\n", timestep)
	//savspike.printf("%g \t %g\n", rect.x(i), recv.x(i))
}
}
/*
for i=0,rect.size()-1 {
    savdata.printf("%g \t \t %g\n", rect.x(i), recv.x(i))

}


savdata.close()
*/
savspike.close()

