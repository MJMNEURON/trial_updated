load_file("nrngui.hoc")


//----------------------------------------------------------------------------
// retinal axon
//----------------------------------------------------------------------------
create retinal_axon
//tc200_cc.oc
retinal_axon {
	insert pas
	g_pas = 3.79e-5
	e_pas = -76.5		// to fit current-clamp data (was -71 to -73)
	cm = 0.88
	Ra = 173

	insert hh2		// insert fast spikes
	ena = 50
	ek = -100
	vtraub_hh2 = -52
	gnabar_hh2 = 0.01		// adapted to single-compartment
	gkbar_hh2 = 0.01 		// adapted to single-compartment

	insert itGHK		// T-current everywhere
	cai = 2.4e-4 
	cao = 2 
	eca = 120 
	shift_itGHK = -1	// screening charge shift + 3 mV error
	gcabar_itGHK = 0.0002
	pcabar_itGHK = 8e-5
	qm_itGHK = 2.5
	qh_itGHK = 2.5
	
	insert cad		// calcium diffusion everywhere
	depth_cad = 0.1
	kt_cad = 0		// no pump
	kd_cad = 1e-4
	taur_cad = 5
	cainf_cad = 2.4e-4	
}

////////////////////////////////////////
///relay cell topology
/////////////////////////////////////////
xopen("cells/tc200.geo") // read geometry file
xopen("loc200.oc") // load procedures for localizing T-current

corrD = 1 // no dendritic surface correction
G_pas = 3.79e-5
E_pas = -73 // to fit current-clamp data (was -71 to -73)
E_pas = -76.5 // within 3 mV error

forall { // insert passive current everywhere
insert pas
g_pas = G_pas * corrD
e_pas = E_pas
cm = 0.88 * corrD
Ra = 173
L = L
}

soma {
g_pas = G_pas
cm = 0.88

insert hh2 // insert fast spikes
ena = 50
ek = -100
vtraub_hh2 = -52
gnabar_hh2 = 0.1
gkbar_hh2 = 0.1
}


forall {
insert itGHK // T-current everywhere
cai = 2.4e-4
cao = 2
eca = 120
shift_itGHK = -1 // screening charge shift + 3 mV error
gcabar_itGHK = corrD * 0.0002
qm_itGHK = 2.5
qh_itGHK = 2.5

insert cad // calcium diffusion everywhere
depth_cad = 0.1 * corrD
kt_cad = 0 // no pump
kd_cad = 1e-4
taur_cad = 5
cainf_cad = 2.4e-4
}

//xopen("loc200.oc") // load procedures for localizing T-current

// uniform T-current with same density as in dissociated cells
// localize(1.7e-5,corrD*1.7e-5,corrD*1.7e-5)

// low density proximal, high distal, to match volt-clamp of intact cells
localize(1.7e-5,corrD*8.5e-5,corrD*8.5e-5)


objectvar rstim // insert current injection

retinal_axon rstim = new IClamp(.5)
rstim.del = 0
rstim.dur = 1e9 // dur has to be infinite when used with vector playing 
rstim.amp = 0

objref fspikes, vecspikes, vecstim
fspikes=new File()
fspikes.ropen("contrast/cs100_10.dat")
vecspikes=new Vector()
vecstim = new Vector(1000,0)
vecspikes.scanf(fspikes)
for total=0, vecspikes.size()-1{
    vecstim.x( int(vecspikes.x(total)*1000) ) = 1000
}
vecspikes.printf()
vecstim.play( &rstim.amp, 1 )

// Definition of the list of NetCon objects representing synapses to the retinal axon
objectvar syn2retinal_axon
syn2retinal_axon = new List()

//----------------------------------------------------------------------------
// relay cell
//----------------------------------------------------------------------------
/*
load_file("relay.nrn")
objectvar relay
relay = new RelayCell()
*/
//----------------------------------------------------------------------------
// retina -> relay AMPA 
//----------------------------------------------------------------------------
objectvar syn // won't be any different if using objref
dend4[0] syn = new AMPA(0.5)

// Cmax_AMPA = 1 // (mM) max transmitter concentration
// Cdur_AMPA = 1 // (ms) transmitter duration (rising phase)
// Alpha_AMPA = 1.1 // (/ms mM) forward (binding) rate
// Beta_AMPA = 0.19 // (/ms) backward (unbinding) rate
// Erev_AMPA = 0 // (mV) reversal potential
Prethresh_AMPA = 0 // (mV) voltage level nec for release
// Deadtime_AMPA = 1 // (ms) mimimum time between release events
// syn.gmax = 0.0001 // (umho) maximum conductanc

retinal_axon syn2retinal_axon.append( new NetCon(&v(0.5), syn, Prethresh_AMPA, 0, 0.19496) )

//----------------------------------------------------------------------------
// interneuron
//----------------------------------------------------------------------------

load_file("INmodel.hoc")

//----------------------------------------------------------------------------
// relay cell
//----------------------------------------------------------------------------
/*
load_file("relay.nrn")
objectvar relay
relay = new RelayCell()
*/
//----------------------------------------------------------------------------
// retina -> relay AMPA 
//----------------------------------------------------------------------------
objectvar syni // won't be any different if using objref
dend[104] syni = new AMPA(0.5)

// Cmax_AMPA = 1 // (mM) max transmitter concentration
// Cdur_AMPA = 1 // (ms) transmitter duration (rising phase)
// Alpha_AMPA = 1.1 // (/ms mM) forward (binding) rate
// Beta_AMPA = 0.19 // (/ms) backward (unbinding) rate
// Erev_AMPA = 0 // (mV) reversal potential
Prethresh_AMPA = 0 // (mV) voltage level nec for release
// Deadtime_AMPA = 1 // (ms) mimimum time between release events
// syn.gmax = 0.0001 // (umho) maximum conductanc

retinal_axon syn2retinal_axon.append( new NetCon(&v(0.5), syni, Prethresh_AMPA, 0, 0.01) )
//----------------------------------------------------------------------------
// transient time
//----------------------------------------------------------------------------
trans = 00

print " "
print ">> Transient time of ",trans," ms"
print " "

//----------------------------------------------------------------------------
// setup simulation parameters
//----------------------------------------------------------------------------
Dt = 0.2
npoints = 4000

dt = 0.1			// must be submultiple of Dt
tstart = trans
tstop = trans + npoints * Dt
runStopAt = tstop
steps_per_ms = 1/Dt

celsius = 34			// temperature of John's experiments

v_init = -74			// approximate resting Vm

objref recv, rect, savspike
rect = new Vector()
recv = new Vector()
rect.record(&t)
//recv.record(&retinal_axon.v(0.5))
recv.record(&soma.v(0.5))
run()
//rect.printf()
savspike= new File()
savspike.wopen("result_cs_2/csr4/csr4_09.dat")
//rect.printf()
timestep=0
for i=0, rect.size()-1 {
    if (recv.x[i] >= -15 && timestep + 1 < rect.x(i)){
	timestep=rect.x(i)
	printf("%g\n", timestep)
	savspike.printf("%g\n", timestep)
	//savspike.printf("%g \t %g\n", rect.x(i), recv.x(i))
}
}

savspike.close()

