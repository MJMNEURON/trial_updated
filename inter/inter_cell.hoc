load_file("nrngui.hoc")

load_file("INmodel.hoc")
/*
create retinal_axon

retinal_axon {
  diam=10
  L=10
  insert pas
  g_pas=1/5000
  e_pas=v_init

  insert hh2 // insert Hodgk-Hux. Na+ and K+ currents for spikes
  ek = -90
  gnabar_hh2 = 0.1
  gkbar_hh2 = 0.03
}

*/

xpanel("select parameterization")
  xbutton("P1:MP = -63","runP1MP()")
 // xbutton("Figure 4 B1. P1:HP = -57","runP1HP()")
  xbutton("P2:MP = -69","runP2MP()")
 // xbutton("Figure 4 B2. P1:MP = -58","runP2HP()")
xpanel()

proc runP1MP() {
  {print "Using Parameterization 1, Resting pot. -63mV"}
  {xopen("Parameters1.hoc")}
  {access soma}
  {Vrest = -63}

}

proc runP2MP() {
  {print "Using Parameterization 2, Resting pot. -69mV"}
  {xopen("Parameters2.hoc")}
  {access soma}
  {Vrest = -69}

}



//----------------------------------------------------------------------------
//  insert electrodes in the soma
//----------------------------------------------------------------------------
objref stim

soma stim=new IClamp(0.5)
//  {IClamp[0].amp = 0.055}
//  {IClamp[1].amp = 0}

//rectangular stimulation
//stim.amp=0.075
stim.del=0
stim.dur=900

//alternative stimulation sin
pi=3.1415
objref vec1, vec2, vec3, vec4, vec5, recv
vec1=new Vector(200, 0.05)
vec2=new Vector(500, 0.05)
vec3=new Vector(200, 0.05)
vec4=new Vector()
vec2.sin(5, pi/2)

vec4.append(vec1,vec2,vec3)
vec4.play(&stim.amp, 1)
//vec4.printf()
/*
objectvar stim // insert current injection

soma stim = new IClamp(.5)
stim.del = 0
stim.dur = 1e9 // dur has to be infinite when used with vetor playing 
stim.amp = 0

objref fspikes, vecspikes, vecstim
fspikes=new File()
fspikes.ropen("../combined/contrast/cs0_01.dat")
vecspikes=new Vector()
vecstim = new Vector(1000,0)
vecspikes.scanf(fspikes)
for total=0, vecspikes.size()-1{
    vecstim.x( int(vecspikes.x(total)*1000) ) = 1000
}
vecspikes.printf()
vecstim.play(&stim.amp, 1)
/*
objectvar syni
soma syni = new AMPA()
soma syni.loc(0.5) // assign postsynaptic compartment
setpointer syni.pre, retinal_axon.v(0.5) // assign presynaptic compartment
*/
/*
objectvar syn2retinal_axon
syn2retinal_axon = new List()

objectvar syn // won't be any different if using objref
dend[87] syn = new AMPA(0.5)

//Cmax_AMPA = 1 // (mM) max transmitter concentration
//Cdur_AMPA = 1 // (ms) transmitter duration (rising phase)
//Alpha_AMPA = 1.1 // (/ms mM) forward (binding) rate
//Beta_AMPA = 0.19 // (/ms) backward (unbinding) rate
//Erev_AMPA = 0 // (mV) reversal potential
Prethresh_AMPA = 0 // (mV) voltage level nec for release
//Deadtime_AMPA = 1 // (ms) mimimum time between release events
//syni.g = 0.0001 // (umho) maximum conductanc
retinal_axon syn2retinal_axon.append( new NetCon(&v(0.5), syn, Prethresh_AMPA, 0, 0.19496) )
*/
/////////////////////////////////////////////////
//using two-step synapse
/////////////////////////////////////////////////
/*objref syn
dend4[0] syn= new ExpSyn(0.5)
syn.tau=0.1
syn.i=1
syn.e=0
*/
/*
objref syn
soma syn= new Exp2Syn(0.5)
syn.tau1=3
syn.tau2=3
//syn.i=1 //in picometers pA, in the figure, they applied 20, 100, 250 and 500, fig 4 Goycolar
syn.e=0 //ampa receptor rev. potential


objref netcon, nil
netcon = new NetCon(nil, syn)

// netcon.weight = 0.08
netcon.weight = 0.1 //for replicating Goycolar 2008

/*
objref fih
fih = new FInitializeHandler("loadqueue()")
proc loadqueue() { 
	for ii=0, vecspikes.size()-1 {netcon.event(vecspikes.x[ii])
}
}



objref fih
fih = new FInitializeHandler("loadqueue()")
proc loadqueue() { 
	netcon.event(100)

}
*/
//----------------------------------------------------------------------------
//  transient time
//----------------------------------------------------------------------------
trans = 00

print " "
print ">> Transient time of ",trans," ms"
print " "



//----------------------------------------------------------------------------
//  setup simulation parameters
//----------------------------------------------------------------------------
Dt = 0.2
npoints = 4000

dt = 0.1			// must be submultiple of Dt
tstart = trans
tstop = trans + npoints * Dt
runStopAt = tstop
steps_per_ms = 1/Dt

celsius = 34			// temperature of John's experiments

v_init = -74			// approximate resting Vm

objref recv, rect, savspike
rect = new Vector()
recv = new Vector()
rect.record(&t)
//recv.record(&retinal_axon.v(0.5))
recv.record(&soma.v(0.5))
run()
savspike= new File()
savspike.wopen("result_cs/csr1/csr1_01.dat")
//recv.printf()
timestep=0
for i=0, rect.size()-1 {
     if (recv.x[i] >= -15 && timestep + 1 < rect.x(i)){
	   timestep=rect.x(i)
	   savspike.printf("%g\n", timestep)
	//savspike.printf("%g \t %g\n", rect.x(i), recv.x(i))
}
}
/*
for i=0,rect.size()-1 {
    savdata.printf("%g \t \t %g\n", rect.x(i), recv.x(i))

}


savdata.close()
*/
savspike.close()

