load_file("nrngui.hoc")

//----------------------------------------------------------------------------
//  create multi-compartment geometry and insert currents
//----------------------------------------------------------------------------

xopen("cells/tc200.geo")		// read geometry file

corrD = 1			// no dendritic surface correction

G_pas = 3.79e-5
E_pas = -73			// to fit current-clamp data (was -71 to -73)
E_pas = -76.5			// within 3 mV error

forall { 			// insert passive current everywhere
	insert pas
	g_pas = G_pas * corrD
	e_pas = E_pas
	cm = 0.88 * corrD
	Ra = 173
	L = L
}

soma {
	g_pas = G_pas
	cm = 0.88

	insert hh2		// insert fast spikes
	ena = 50
	ek = -100
	vtraub_hh2 = -52
	gnabar_hh2 = 0.1
	gkbar_hh2 = 0.1
}


forall {
	insert itGHK		// T-current everywhere
	cai = 2.4e-4 
	cao = 2 
	eca = 120 
	shift_itGHK = -1	// screening charge shift + 3 mV error
	gcabar_itGHK = corrD * 0.0002
	qm_itGHK = 2.5
	qh_itGHK = 2.5

	insert cad		// calcium diffusion everywhere
	depth_cad = 0.1 * corrD
	kt_cad = 0		// no pump
	kd_cad = 1e-4
	taur_cad = 5
	cainf_cad = 2.4e-4	
}

xopen("loc200.oc")		// load procedures for localizing T-current

// low density proximal, high distal, to match volt-clamp of intact cells
localize(1.7e-5,corrD*8.5e-5,corrD*8.5e-5)

//----------------------------------------------------------------------------
//  retinal synapse
//----------------------------------------------------------------------------
objref fspikes, vecspikes
//fspikes=new File()

//objref datafile
strdef extension, basename, filename
extension = "dat"
basename = "cs0_0"
//xopen("mar_17/input")
chdir("/home/major/trial/relay/mar_17/")
xopen("input/")
for count = 1, 10{
	sprint(filename, "/home/major/trial/relay/mar_17/input/%s%d.%s", basename, count, extension)
	fspikes = new File(filename)


vecspikes=new Vector()
vecspikes.scanf(fspikes)
for total=0, vecspikes.size()-1{ 
	vecspikes.x(total)=vecspikes.x(total)*1000
}
vecspikes.printf()
objref syn
dend4[0] syn= new ExpSyn(0.5)
syn.tau=0.1
syn.i=1
syn.e=0

objref netcon, nil
netcon = new NetCon(nil, syn)
netcon.weight = 1.425

objref fih
fih = new FInitializeHandler("loadqueue()")
proc loadqueue() { 
	for ii=0, vecspikes.size()-1 {netcon.event(vecspikes.x[ii])
}
}

//----------------------------------------------------------------------------
//  transient time
//----------------------------------------------------------------------------
trans = 00

print " "
print ">> Transient time of ",trans," ms"
print " "

//----------------------------------------------------------------------------
//  setup simulation parameters
//----------------------------------------------------------------------------
Dt = 0.2
npoints = 4000

dt = 0.1			// must be submultiple of Dt
tstart = trans
tstop = trans + npoints * Dt
runStopAt = tstop
steps_per_ms = 1/Dt

celsius = 34			// temperature of John's experiments

v_init = -74			// approximate resting Vm

objref recv, rect, savspike
rect = new Vector()
recv = new Vector()
rect.record(&t)
recv.record(&soma.v(0.5))
run()
savspike= new File()
savspike.wopen("/home/major/trial/relay/mar_17/result_lum/lumr5_10.dat")
timestep=0
for i=0, rect.size()-1 {
    if (recv.x[i] >= -15 && timestep + 1 < rect.x(i)){
	timestep=rect.x(i)
	savspike.printf("%g\n", timestep)
}
}
savspike.close()



}



