load_file("nrngui.hoc")


create axon
axon {
  diam=10
  L=10
  insert pas
  g_pas=1/5000
  e_pas=v_init

  insert hh2 // insert Hodgk-Hux. Na+ and K+ currents for spikes
  ek = -90
  gnabar_hh2 = 0.1
  gkbar_hh2 = 0.03
}

//----------------------------------------------------------------------------
// create multi-compartment geometry and insert currents
//----------------------------------------------------------------------------

xopen("cells/tc200.geo") // read geometry file

corrD = 1 // no dendritic surface correction

G_pas = 3.79e-5
E_pas = -73 // to fit current-clamp data (was -71 to -73)
E_pas = -76.5 // within 3 mV error

forall { // insert passive current everywhere
insert pas
g_pas = G_pas * corrD
e_pas = E_pas
cm = 0.88 * corrD
Ra = 173
L = L
}

soma {
g_pas = G_pas
cm = 0.88

insert hh2 // insert fast spikes
ena = 50
ek = -100
vtraub_hh2 = -52
gnabar_hh2 = 0.1
gkbar_hh2 = 0.1
}


forall {
insert itGHK // T-current everywhere
cai = 2.4e-4
cao = 2
eca = 120
shift_itGHK = -1 // screening charge shift + 3 mV error
gcabar_itGHK = corrD * 0.0002
qm_itGHK = 2.5
qh_itGHK = 2.5

insert cad // calcium diffusion everywhere
depth_cad = 0.1 * corrD
kt_cad = 0 // no pump
kd_cad = 1e-4
taur_cad = 5
cainf_cad = 2.4e-4
}

xopen("loc200.oc") // load procedures for localizing T-current

// uniform T-current with same density as in dissociated cells
// localize(1.7e-5,corrD*1.7e-5,corrD*1.7e-5)

// low density proximal, high distal, to match volt-clamp of intact cells
localize(1.7e-5,corrD*8.5e-5,corrD*8.5e-5)

//----------------------------------------------------------------------------
// retinal synapse
//----------------------------------------------------------------------------

objectvar stim // insert current injection

axon stim = new IClamp(.5)
/*
objref syew
axon syew= new ExpSyn(0.5)
syew.tau=0.1
syew.i=1
syew.e=0
*/

stim.del = 0
stim.dur = 1e9 // 2 ms for single psp, 10 ms for train of psps
stim.amp = 0.1

objref fspikes, vecspikes, vecstim
fspikes=new File()
fspikes.ropen("/home/major/trial/relay/mar_11/spatial_frequency_tuning_0.15ahh.dat")
vecspikes=new Vector()
vecstim = new Vector(1000,0)
vecspikes.scanf(fspikes)

for total=0, vecspikes.size()-1{
    vecstim.x( int(vecspikes.x(total)*1000) ) = 10
}

vecspikes.printf()
vecstim.play(&stim.amp, 1)

//dend4[0] = new AMPA() // create synapse
objectvar syn
dend4[0] syn = new AMPA()
dend4[0] syn.loc(0.5) // assign postsynaptic compartment
setpointer syn.pre, axon.v(0.5) // assign presynaptic compartment

//syn.mapper: mapping the AMPA receptor to the existing proximal dendrite
//
///-------------------------------------------------------------------------
//soma1 syn1=new synp(.5)
//setpointer syn1.vpre, axon2.v(1)
//
//would enable the synapse in soma1 to observe the axon2 membrane potential.
///-------------------------------------------------------------------------
Cmax_AMPA = 1 // (mM) max transmitter concentration
Cdur_AMPA = 1 // (ms) transmitter duration (rising phase)
Alpha_AMPA = 1.1 // (/ms mM) forward (binding) rate
Beta_AMPA = 0.19 // (/ms) backward (unbinding) rate
Erev_AMPA = 0 // (mV) reversal potential
Prethresh_AMPA = 0 // (mV) voltage level nec for release
Deadtime_AMPA = 1 // (ms) mimimum time between release events
syn.g = 0.0001 // (umho) maximum conductance

/*
objref syn
dend4[0] syn= new ExpSyn(0.5)
syn.tau=0.5
syn.i=1
syn.e=0

objref netcon, nil
netcon = new NetCon(nil, syn)
netcon.weight = 1.425

objref fih
fih = new FInitializeHandler("loadqueue()")
proc loadqueue() {
for ii=0, vecspikes.size()-1 {netcon.event(vecspikes.x[ii])
}
}
*/


//----------------------------------------------------------------------------
// transient time
//----------------------------------------------------------------------------
trans = 00

print " "
print ">> Transient time of ",trans," ms"
print " "

//----------------------------------------------------------------------------
// setup simulation parameters
//----------------------------------------------------------------------------
Dt = 0.2
npoints = 4000

dt = 0.1			// must be submultiple of Dt
tstart = trans
tstop = trans + npoints * Dt
runStopAt = tstop
steps_per_ms = 1/Dt

celsius = 34			// temperature of John's experiments

v_init = -74			// approximate resting Vm

objref recv, rect, savspike
rect = new Vector()
recv = new Vector()
rect.record(&t)
recv.record(&dend4[0].v(0.5))
run()
savspike= new File()
savspike.wopen("/home/major/trial/ampa_spatial0.15.dat")
//recv.printf()
timestep=0
for i=0, rect.size()-1 {
    if (recv.x[i] >= -15 && timestep + 1 < rect.x(i)){
	timestep=rect.x(i)
	printf("%g\n", timestep)
	savspike.printf("%g\n", timestep)
	//savspike.printf("%g \t %g\n", rect.x(i), recv.x(i))
}
}

savspike.close()


