load_file("nrngui.hoc")

/*create soma

/*soma {  
  nseg = 1
  diam = 76.58			
  L = 100
  cm = 1
}
/*
soma {
	insert pas
	g_pas = 3.79e-5
	e_pas = -76.5		// to fit current-clamp data (was -71 to -73)
	cm = 0.88
	Ra = 173

	insert hh2		// insert fast spikes
	ena = 50
	ek = -100
	vtraub_hh2 = -52
	gnabar_hh2 = 0.01		// adapted to single-compartment
	gkbar_hh2 = 0.01 		// adapted to single-compartment

	insert itGHK		// T-current everywhere
	cai = 2.4e-4 
	cao = 2 
	eca = 120 
	shift_itGHK = -1	// screening charge shift + 3 mV error
	gcabar_itGHK = 0.0002
	qm_itGHK = 2.5
	qh_itGHK = 2.5

	insert cad		// calcium diffusion everywhere
	depth_cad = 0.1
	kt_cad = 0		// no pump
	kd_cad = 1e-4
	taur_cad = 5
	cainf_cad = 2.4e-4	
}

soma.pcabar_itGHK = 8e-5

*/


//----------------------------------------------------------------------------
//  create multi-compartment geometry and insert currents
//----------------------------------------------------------------------------

xopen("cells/tc200.geo")		// read geometry file

corrD = 1			// no dendritic surface correction

G_pas = 3.79e-5
E_pas = -73			// to fit current-clamp data (was -71 to -73)
E_pas = -76.5			// within 3 mV error

forall { 			// insert passive current everywhere
	insert pas
	g_pas = G_pas * corrD
	e_pas = E_pas
	cm = 0.88 * corrD
	Ra = 173
	L = L
}

soma {
	g_pas = G_pas
	cm = 0.88

	insert hh2		// insert fast spikes
	ena = 50
	ek = -100
	vtraub_hh2 = -52
	gnabar_hh2 = 0.1
	gkbar_hh2 = 0.1
}


forall {
	insert itGHK		// T-current everywhere
	cai = 2.4e-4 
	cao = 2 
	eca = 120 
	shift_itGHK = -1	// screening charge shift + 3 mV error
	gcabar_itGHK = corrD * 0.0002
	qm_itGHK = 2.5
	qh_itGHK = 2.5

	insert cad		// calcium diffusion everywhere
	depth_cad = 0.1 * corrD
	kt_cad = 0		// no pump
	kd_cad = 1e-4
	taur_cad = 5
	cainf_cad = 2.4e-4	
}



xopen("loc200.oc")		// load procedures for localizing T-current


// uniform T-current with same density as in dissociated cells
// localize(1.7e-5,corrD*1.7e-5,corrD*1.7e-5)


// low density proximal, high distal, to match volt-clamp of intact cells
localize(1.7e-5,corrD*8.5e-5,corrD*8.5e-5)




//----------------------------------------------------------------------------
//  insert electrodes in the soma
//----------------------------------------------------------------------------
objref stim

soma stim=new IClamp(0.5)
/*
//rectangular stimulation
//stim.amp=0.075
stim.del=0
stim.dur=900

//alternative stimulation sin
pi=3.1415
objref vec1, vec2, vec3, vec4, vec5, recv
vec1=new Vector(200, 0.05)
vec2=new Vector(500, 0.05)
vec3=new Vector(200, 0.05)
vec4=new Vector()
vec2.sin(5, pi/2)

vec4.append(vec1,vec2,vec3)
//vec4.play(&stim.amp, 1)
//vec4.printf()
*/


//----------------------------------------------------------------------------
//  retinal synapse
//----------------------------------------------------------------------------
objref fspikes, vecspikes
fspikes=new File()
fspikes.ropen("3.dat")
vecspikes=new Vector()
vecspikes.scanf(fspikes)
vecspikes.printf()
objref syn
dend4[0] syn= new ExpSyn(0.5)
syn.tau=0.1
syn.i=1
syn.e=0

objref netcon, nil
netcon = new NetCon(nil, syn)
netcon.weight = 0.08

objref fih
fih = new FInitializeHandler("loadqueue()")
proc loadqueue() { 
	for ii=0, vecspikes.size()-1 {netcon.event(vecspikes.x[ii])
}
}



//----------------------------------------------------------------------------
//  transient time
//----------------------------------------------------------------------------
trans = 00

print " "
print ">> Transient time of ",trans," ms"
print " "



//----------------------------------------------------------------------------
//  setup simulation parameters
//----------------------------------------------------------------------------
Dt = 0.2
npoints = 1500

dt = 0.1			// must be submultiple of Dt
tstart = trans
tstop = trans + npoints * Dt
runStopAt = tstop
steps_per_ms = 1/Dt

celsius = 34			// temperature of John's experiments

v_init = -74			// approximate resting Vm




////////////////////////////////////
//saving response data 
//saving with thresholding
////////////////////////////////////
/*
objref sadata
//run()
sadata = new File()
sadata.wopen("inputI.dat")
sadata.printf("timestep \t current \n \n")
for i=0, 899{
    sadata.printf("%g \t \t %g \n", i, vec4.x[i])
}
sadata.close()
*/

objref savdata, recv, rect, savspike
rect = new Vector()
recv = new Vector()
rect.record(&t)
recv.record(&soma.v(0.5))
run()
savdata = new File()
savspike= new File()
savdata.wopen("outputV.dat")
savspike.wopen("retina3.dat")
//recv.printf()
timestep=0
for i=0, rect.size()-1 {
    if (recv.x[i] >= -15 && timestep + 1 < rect.x(i)){
	timestep=rect.x(i)
	savspike.printf("%g\n", timestep)
	//savspike.printf("%g \t %g\n", rect.x(i), recv.x(i))
}
}
for i=0,rect.size()-1 {
    savdata.printf("%g \t \t %g\n", rect.x(i), recv.x(i))

}

savdata.close()
savspike.close()







